import { fileURLToPath, URL } from 'node:url';
import { defineConfig } from 'vite';
import plugin from '@vitejs/plugin-react';
import fs from 'fs';
import path from 'path';
import child_process from 'child_process';
import { env } from 'process';
import os from 'os';

// Determinar carpeta base para certificados (Windows y Linux compatible)
const baseFolder =
    env.APPDATA && env.APPDATA !== ''
        ? path.join(env.APPDATA, 'ASP.NET', 'https')
        : env.HOME && env.HOME !== ''
            ? path.join(env.HOME, '.aspnet', 'https')
            : path.join(os.homedir(), '.aspnet', 'https'); // Fallback

const certificateName = "hermeshandling.client";
const certFilePath = path.join(baseFolder, `${certificateName}.pem`);
const keyFilePath = path.join(baseFolder, `${certificateName}.key`);

// Debug log
console.log('Cert baseFolder:', baseFolder);

// Crear la carpeta si no existe
if (!fs.existsSync(baseFolder)) {
    fs.mkdirSync(baseFolder, { recursive: true });
    console.log('Directorio creado para certificados:', baseFolder);
}

// Crear certificado si no existe
if (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath)) {
    console.log('Certificado o clave no existen, intentando crear...');
    const result = child_process.spawnSync('dotnet', [
        'dev-certs',
        'https',
        '--export-path', certFilePath,
        '--format', 'Pem',
        '--no-password',
    ], { stdio: 'inherit' });

    if (result.status !== 0) {
        throw new Error("Could not create certificate.");
    }
}

const target = env.ASPNETCORE_HTTPS_PORT ? `https://localhost:${env.ASPNETCORE_HTTPS_PORT}` :
    env.ASPNETCORE_URLS ? env.ASPNETCORE_URLS.split(';')[0] : 'https://localhost:7019';

export default defineConfig({
    plugins: [plugin()],
    resolve: {
        alias: {
            '@': fileURLToPath(new URL('./src', import.meta.url))
        }
    },
    server: {
        proxy: {
            '^/weatherforecast': {
                target,
                secure: false
            }
        },
        port: 5173,
        https: {
            key: fs.readFileSync(keyFilePath),
            cert: fs.readFileSync(certFilePath),
        }
    }
});
